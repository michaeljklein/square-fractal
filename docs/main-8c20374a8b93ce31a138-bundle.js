(()=>{"use strict";var t,e={417:(t,e,r)=>{var n,o=r(500),i=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});function s(t,e){return new o.E9({x:(t.x+e.x)/2,y:(t.y+e.y)/2})}var p=function(){function t(){}return t.prototype.render_pointarray=function(){return new o.VC(this.render().flatMap((function(t){return[t.x,t.y]})))},t.prototype.fractalize=function(t,e,r,n){var i=(0,o.Wj)().addTo("body").size(e,e);i.polyline(this.render_pointarray()).fill("none").stroke({color:"#000",width:r});for(var s=0,p=[[this,0]],a=function(){var e=p.pop(),o=e[0],a=e[1];if(s++,i.polyline(o.render_pointarray()).fill("none").stroke({color:"#000",width:r}),a<=t){var u=crypto.getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32),c=o.step_options(n),h=Math.floor(u*c);p.push.apply(p,o.next_step(h,n).map((function(t){return[t,a+1]})))}};p.length;)a();return s},t}(),a=function(t){function e(e,r,n){var o=t.call(this)||this;return o.pt0=e,o.pt1=r,o.pt2=n,o}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2];this.pt1=t[0],this.pt2=t[1],this.pt0=t[2]},e.prototype.trisect=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=s(t,r),i=s(r,n),p=s(n,t);return[new e(t,o,p),new e(o,r,i),new e(p,i,n),new e(o,i,p)]},e.prototype.t_split=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=s(t,r),i=s(r,n),p=s(n,t),a=s(o,p);return[new e(t,o,p),new u(a,o,r,i),new u(p,a,i,n)]},e.prototype.step_options=function(t){return t?5:9},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.trisect();case 1:return this.t_split();case 2:return this.rotate(),this.t_split();case 3:return this.rotate(),this.rotate(),this.t_split();case 4:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:case 2:return this.trisect();case 3:return this.t_split();case 4:return this.rotate(),this.t_split();case 5:return this.rotate(),this.rotate(),this.t_split();case 6:case 7:case 8:return[];default:throw new Error("next_step: index out of range")}},e}(p),u=function(t){function e(e,r,n,o){var i=t.call(this)||this;return i.pt0=e,i.pt1=r,i.pt2=n,i.pt3=o,i}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2,this.pt3]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2,this.pt3];this.pt1=t[0],this.pt2=t[1],this.pt3=t[2],this.pt0=t[3]},e.prototype.step_options=function(t){return 1},e.prototype.next_step=function(t,e){if(0===t)return[];throw new Error("next_step: index out of range")},e}(p),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.quadsect=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=this.pt3,i=s(this.pt0,this.pt1),p=s(this.pt1,this.pt2),u=s(this.pt2,this.pt3),c=s(this.pt3,this.pt0);return[new a(t,i,c),new a(i,r,p),new a(p,n,u),new a(c,u,o),new e(i,p,u,c)]},e.prototype.bisect=function(){var t=this.pt0,e=this.pt1,r=this.pt2,n=this.pt3;return[new a(t,e,r),new a(t,r,n)]},e.prototype.step_options=function(t){return t?4:6},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.quadsect();case 1:return this.bisect();case 2:return this.rotate(),this.bisect();case 3:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:return this.quadsect();case 2:return this.bisect();case 3:return this.rotate(),this.bisect();case 4:case 5:return[];default:throw new Error("next_step: index out of range")}},e}(u);window.onload=function(){return t=this,e=void 0,n=function(){var t,e,r,n,i,s,p,a,u,h,l,f;return function(t,e){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function p(p){return function(a){return function(p){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,p[0]&&(s=0)),s;)try{if(r=1,n&&(o=2&p[0]?n.return:p[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,p[1])).done)return o;switch(n=0,o&&(p=[2&p[0],o.value]),p[0]){case 0:case 1:o=p;break;case 4:return s.label++,{value:p[1],done:!1};case 5:s.label++,n=p[1],p=[0];continue;case 7:p=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==p[0]&&2!==p[0])){s=0;continue}if(3===p[0]&&(!o||p[1]>o[0]&&p[1]<o[3])){s.label=p[1];break}if(6===p[0]&&s.label<o[1]){s.label=o[1],o=p;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(p);break}o[2]&&s.ops.pop(),s.trys.pop();continue}p=e.call(t,s)}catch(t){p=[6,t],n=0}finally{r=o=0}if(5&p[0])throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}([p,a])}}}(this,(function(w){for(t=Math.min(window.innerHeight,window.innerWidth),console.log("pixel size:",t),e=new o.E9({x:0,y:t}),r=new o.E9({x:t,y:t}),n=new o.E9({x:t,y:0}),i=new o.E9({x:0,y:0}),s=new c(e,r,n,i),p=new URLSearchParams(window.location.search),(a=Number(p.get("depth")))||(a=3),(u=Number(p.get("stroke")))||(u=3),h=p.get("uniform"),l=!h||"t"==h,f=s.fractalize(a,t,u,l),console.log("num_shapes",f);f<2;)document.body.removeChild(document.body.children[0]),f=s.fractalize(a,t,u,l),console.log("num_shapes",f);return[2]}))},new((r=void 0)||(r=Promise))((function(o,i){function s(t){try{a(n.next(t))}catch(t){i(t)}}function p(t){try{a(n.throw(t))}catch(t){i(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,p)}a((n=n.apply(t,e||[])).next())}));var t,e,r,n}}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.m=e,t=[],n.O=(e,r,o,i)=>{if(!r){var s=1/0;for(c=0;c<t.length;c++){for(var[r,o,i]=t[c],p=!0,a=0;a<r.length;a++)(!1&i||s>=i)&&Object.keys(n.O).every((t=>n.O[t](r[a])))?r.splice(a--,1):(p=!1,i<s&&(s=i));if(p){t.splice(c--,1);var u=o();void 0!==u&&(e=u)}}return e}i=i||0;for(var c=t.length;c>0&&t[c-1][2]>i;c--)t[c]=t[c-1];t[c]=[r,o,i]},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};n.O.j=e=>0===t[e];var e=(e,r)=>{var o,i,[s,p,a]=r,u=0;if(s.some((e=>0!==t[e]))){for(o in p)n.o(p,o)&&(n.m[o]=p[o]);if(a)var c=a(n)}for(e&&e(r);u<s.length;u++)i=s[u],n.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return n.O(c)},r=self.webpackChunksquare_fractal=self.webpackChunksquare_fractal||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})();var o=n.O(void 0,[500],(()=>n(417)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1kZDVlMjZkMGEwMGZhOTkxOTdiMC1idW5kbGUuanMiLCJtYXBwaW5ncyI6InVCQUFJQSxFLG1lQzZCSixTQUFTQyxFQUFTQyxFQUFXQyxHQUMzQixPQUFPLElBQUksS0FBTSxDQUNmQyxHQUFJRixFQUFHRSxFQUFJRCxFQUFHQyxHQUFLLEVBQ25CQyxHQUFJSCxFQUFHRyxFQUFJRixFQUFHRSxHQUFLLEdBRXZCLENBRUEsOEJBOENBLFFBckNFLFlBQUFDLGtCQUFBLFdBQ0UsT0FBTyxJQUFJLEtBQVdDLEtBQUtDLFNBQVNDLFNBQVEsU0FBQ0MsR0FBUSxNQUFPLENBQUNBLEVBQUdOLEVBQUdNLEVBQUdMLEVBQUUsSUFDMUUsRUFHQSxZQUFBTSxXQUFBLFNBQ0VDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBR0EsSUFBSUMsR0FBTyxVQUFNQyxNQUFNLFFBQVFDLEtBQUtMLEVBQVlBLEdBQ2hERyxFQUFLRyxTQUFTWixLQUFLRCxxQkFBcUJjLEtBQUssUUFBUUMsT0FBTyxDQUFFQyxNQUFPLE9BQVFDLE1BQU9ULElBS3BGLElBRkEsSUFBSVUsRUFBaUIsRUFDakJDLEVBQXVDLENBQUMsQ0FBQ2xCLEtBQU0sSSxhQUU3QyxNQUFpQ2tCLEVBQWtCQyxNQUFsREMsRUFBYSxLQUFFQyxFQUFhLEtBSWpDLEdBSEFKLElBQ0FSLEVBQUtHLFNBQVNRLEVBQWNyQixxQkFBcUJjLEtBQUssUUFBUUMsT0FBTyxDQUFFQyxNQUFPLE9BQVFDLE1BQU9ULElBRXpGYyxHQUFpQmhCLEVBQVcsQ0FDOUIsSUFBSWlCLEVBQWtCQyxPQUFPQyxnQkFBZ0IsSUFBSUMsWUFBWSxJQUFJLEdBQUcsV0FBRyxJQUNuRUMsRUFBTU4sRUFBY08sYUFBYW5CLEdBQ2pDb0IsRUFBa0JDLEtBQUtDLE1BQU1SLEVBQWtCSSxHQUNuRFIsRUFBa0JhLEtBQUksTUFBdEJiLEVBQTBCRSxFQUFjWSxVQUFVSixFQUFpQnBCLEdBQWlCeUIsS0FBSSxTQUFDcEMsR0FFdkYsTUFEMkIsQ0FBQ0EsRUFBR3dCLEVB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QUFFYSxFQUFhdEMsS0FDckNELEVBQW9CTyxFQUFFTixHQUFZc0MsRUFBWXRDLElBR2hELEdBQUd1QyxFQUFTLElBQUkvQixFQUFTK0IsRUFBUXhDLEVBQ2xDLENBRUEsSUFER3FDLEdBQTRCQSxFQUEyQkMsR0FDckR2QixFQUFJTCxFQUFTdEQsT0FBUTJELElBQ3pCb0IsRUFBVXpCLEVBQVNLLEdBQ2hCZixFQUFvQjBCLEVBQUVRLEVBQWlCQyxJQUFZRCxFQUFnQkMsSUFDckVELEVBQWdCQyxHQUFTLEtBRTFCRCxFQUFnQkMsR0FBVyxFQUU1QixPQUFPbkMsRUFBb0JRLEVBQUVDLEVBQU8sRUFHakNrQyxFQUFxQkMsS0FBaUMsMkJBQUlBLEtBQWlDLDRCQUFLLEdBQ3BHRCxFQUFtQkUsUUFBUVQsRUFBcUJVLEtBQUssS0FBTSxJQUMzREgsRUFBbUIxRixLQUFPbUYsRUFBcUJVLEtBQUssS0FBTUgsRUFBbUIxRixLQUFLNkYsS0FBS0gsRyxLQzdDdkYsSUFBSUksRUFBc0IvQyxFQUFvQlEsT0FBRUwsRUFBVyxDQUFDLE1BQU0sSUFBT0gsRUFBb0IsT0FDN0YrQyxFQUFzQi9DLEVBQW9CUSxFQUFFdUMsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3NxdWFyZS1mcmFjdGFsL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vc3F1YXJlLWZyYWN0YWwvLi9mcmFjdGFsLnRzIiwid2VicGFjazovL3NxdWFyZS1mcmFjdGFsL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NxdWFyZS1mcmFjdGFsL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zcXVhcmUtZnJhY3RhbC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NxdWFyZS1mcmFjdGFsL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3NxdWFyZS1mcmFjdGFsL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJpbXBvcnQgeyBTVkcsIFBvaW50LCBQb2ludEFycmF5IH0gZnJvbSAnQHN2Z2RvdGpzL3N2Zy5qcydcblxuLy8gVE9ETzpcbi8vIC0gY2hhbmdlIHdlaWdodHNcbi8vIC0gY2hhbmdlIG1pZHBvaW50IGZyYWN0aW9uXG5cbi8vIHNxdWFyZSBmcmFjdGFsOlxuLy8gLSBzdGFydCB3aXRoIGEgc3F1YXJlXG4vLyAtIGVhY2ggc2hhcGUgY2FuIGJlOlxuLy8gICArIHNxdWFyZVxuLy8gICAgICogc3F1YXJlIGluc2lkZVxuLy8gICAgICogc3BsaXQgaW50byB0d28gdHJpYW5nbGVzIHR3byB3YXlzXG4vLyAgICAgKiBsZWF2ZSBlbXB0eVxuLy8gICArIHRyaWFuZ2xlXG4vLyAgICAgKiB0cmlhbmdsZSBpbnNpZGVcbi8vICAgICAqIHNwbGl0IGludG8gXCJUXCI6IHRyaWFuZ2xlIGFuZCB0d28gfnJob21idXMnXG4vLyAgICsgcmhvbWJ1c1xuLy8gICAgICogbGVhdmUgZW1wdHlcbi8vXG4vLyBzbyB3ZSBlaXRoZXI6XG4vLyAgIDEuIHRha2UgdGhlIGlucHV0IChOKSBhcyBhIG1peGVkLWJhc2Ugc2VlZFxuLy8gICAyLiBwaWNrIHJhbmRvbWx5IGVhY2ggc3RlcFxuLy9cbi8vIHR3byBsaXN0czpcbi8vIC0gbm9uLWRvbmUgcXVldWUgKHRyaWFuZ2xlIHwgc3F1YXJlKVxuLy8gLSBkb25lIHF1ZXVlICh0cmlhbmdsZSB8IHNxdWFyZSB8IH5yaG9tYnVzKVxuLy9cbi8vIGZpbmFsbHksIHJlbmRlciB0cmlhbmdsZXxzcXVhcmV8cmhvbWJ1cyAtPiBTVkdcblxuZnVuY3Rpb24gbWlkcG9pbnQoeHM6IFBvaW50LCB5czogUG9pbnQpOiBQb2ludCB7XG4gIHJldHVybiBuZXcgUG9pbnQoe1xuICAgIHg6ICh4cy54ICsgeXMueCkgLyAyLFxuICAgIHk6ICh4cy55ICsgeXMueSkgLyAyLFxuICB9KVxufVxuXG5hYnN0cmFjdCBjbGFzcyBTaGFwZSB7XG4gIGFic3RyYWN0IHJlbmRlcigpOiBQb2ludFtdO1xuXG4gIGFic3RyYWN0IHJvdGF0ZSgpOiB2b2lkO1xuXG4gIGFic3RyYWN0IHN0ZXBfb3B0aW9ucyh1bmlmb3JtX3dlaWdodHM6IGJvb2xlYW4pOiBudW1iZXI7XG5cbiAgYWJzdHJhY3QgbmV4dF9zdGVwKGluZGV4OiBudW1iZXIsIHVuaWZvcm1fd2VpZ2h0czogYm9vbGVhbik6IFNoYXBlW107XG5cbiAgcmVuZGVyX3BvaW50YXJyYXkoKTogUG9pbnRBcnJheSB7XG4gICAgcmV0dXJuIG5ldyBQb2ludEFycmF5KHRoaXMucmVuZGVyKCkuZmxhdE1hcCgocHQpID0+IHtyZXR1cm4gW3B0LngsIHB0LnldfSkpO1xuICB9XG5cbiAgLy8gcmV0dXJucyB0aGUgbnVtYmVyIG9mIHN1Yi1zaGFwZXMgZHJhd25cbiAgZnJhY3RhbGl6ZShcbiAgICBtYXhfZGVwdGg6IG51bWJlcixcbiAgICBwaXhlbF9zaXplOiBudW1iZXIsXG4gICAgc3Ryb2tlX3dpZHRoOiBudW1iZXIsXG4gICAgdW5pZm9ybV93ZWlnaHRzOiBib29sZWFuLFxuICAgIC8vIGJvcmRlcl9waXhlbHM6IG51bWJlciwgLy8gVE9ETyA/XG4gICk6IG51bWJlciB7XG4gICAgdmFyIGRyYXcgPSBTVkcoKS5hZGRUbygnYm9keScpLnNpemUocGl4ZWxfc2l6ZSwgcGl4ZWxfc2l6ZSk7XG4gICAgZHJhdy5wb2x5bGluZSh0aGlzLnJlbmRlcl9wb2ludGFycmF5KCkpLmZpbGwoJ25vbmUnKS5zdHJva2UoeyBjb2xvcjogJyMwMDAnLCB3aWR0aDogc3Ryb2tlX3dpZHRoIH0pO1xuXG4gICAgLy8gW3NoYXBlLCBkZXB0aF1cbiAgICB2YXIgbnVtX3N1Yl9zaGFwZXMgPSAwO1xuICAgIHZhciB1bmZpbmlzaGVkX3NoYXBlczogW1NoYXBlLCBudW1iZXJdW10gPSBbW3RoaXMsIDBdXTtcbiAgICB3aGlsZSAodW5maW5pc2hlZF9zaGFwZXMubGVuZ3RoKSB7XG4gICAgICBsZXQgW2N1cnJlbnRfc2hhcGUsIGN1cnJlbnRfZGVwdGhdID0gdW5maW5pc2hlZF9zaGFwZXMucG9wKCk7XG4gICAgICBudW1fc3ViX3NoYXBlcysrO1xuICAgICAgZHJhdy5wb2x5bGluZShjdXJyZW50X3NoYXBlLnJlbmRlcl9wb2ludGFycmF5KCkpLmZpbGwoJ25vbmUnKS5zdHJva2UoeyBjb2xvcjogJyMwMDAnLCB3aWR0aDogc3Ryb2tlX3dpZHRoIH0pO1xuXG4gICAgICBpZiAoY3VycmVudF9kZXB0aCA8PSBtYXhfZGVwdGgpIHtcbiAgICAgICAgbGV0IG5leHRfcmFuZG9tX251bSA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXS8yKiozMjtcbiAgICAgICAgbGV0IG1heCA9IGN1cnJlbnRfc2hhcGUuc3RlcF9vcHRpb25zKHVuaWZvcm1fd2VpZ2h0cyk7XG4gICAgICAgIGxldCBuZXh0X3N0ZXBfaW5kZXggPSBNYXRoLmZsb29yKG5leHRfcmFuZG9tX251bSAqIG1heCk7XG4gICAgICAgIHVuZmluaXNoZWRfc2hhcGVzLnB1c2goLi4uY3VycmVudF9zaGFwZS5uZXh0X3N0ZXAobmV4dF9zdGVwX2luZGV4LCB1bmlmb3JtX3dlaWdodHMpLm1hcCgoeCkgPT4ge1xuICAgICAgICAgIGxldCByZXQ6IFtTaGFwZSwgbnVtYmVyXSA9IFt4LCBjdXJyZW50X2RlcHRoICsgMV07XG4gICAgICAgICAgcmV0dXJuIHJldFxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bV9zdWJfc2hhcGVzXG4gIH1cblxufVxuXG5cbmNsYXNzIFRyaWFuZ2xlIGV4dGVuZHMgU2hhcGUge1xuICBwdDA6IFBvaW50O1xuICBwdDE6IFBvaW50O1xuICBwdDI6IFBvaW50O1xuXG4gIGNvbnN0cnVjdG9yKHB0MDogUG9pbnQsIHB0MTogUG9pbnQsIHB0MjogUG9pbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHQwID0gcHQwO1xuICAgIHRoaXMucHQxID0gcHQxO1xuICAgIHRoaXMucHQyID0gcHQyO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBbdGhpcy5wdDAsIHRoaXMucHQxLCB0aGlzLnB0Ml1cbiAgfVxuXG4gIHJvdGF0ZSgpIHtcbiAgICBsZXQgcG9pbnRzID0gW3RoaXMucHQwLCB0aGlzLnB0MSwgdGhpcy5wdDJdO1xuICAgIFt0aGlzLnB0MSwgdGhpcy5wdDIsIHRoaXMucHQwXSA9IHBvaW50cztcbiAgfVxuXG4gIC8vIHAwXG4gIC8vIHxcXFxuICAvLyB8IFxcXG4gIC8vIHwgIFxcXG4gIC8vIHwgICBcXFxuICAvLyB8IEEgIFxcXG4gIC8vIHwgICAgIFxcXG4gIC8vIHw8cDIwX19cXCA8cDAxXG4gIC8vIHwgXFwgTSAgL1xcXG4gIC8vIHwgIFxcICAvICBcXFxuICAvLyB8IEMgXFwvIEIgIFxcXG4gIC8vIC0tLS0tLS0tLS0tIHAxXG4gIC8vIHAyICAgcDEyXG4gIHRyaXNlY3QoKTogW1RyaWFuZ2xlLCBUcmlhbmdsZSwgVHJpYW5nbGUsIFRyaWFuZ2xlXSB7XG4gICAgbGV0IHB0MCA9IHRoaXMucHQwO1xuICAgIGxldCBwdDEgPSB0aGlzLnB0MTtcbiAgICBsZXQgcHQyID0gdGhpcy5wdDI7XG5cbiAgICBsZXQgcHQwMSA9IG1pZHBvaW50KHB0MCwgcHQxKTtcbiAgICBsZXQgcHQxMiA9IG1pZHBvaW50KHB0MSwgcHQyKTtcbiAgICBsZXQgcHQyMCA9IG1pZHBvaW50KHB0MiwgcHQwKTtcblxuICAgIGxldCB0cmlhbmdsZV9BID0gbmV3IFRyaWFuZ2xlKHB0MCwgcHQwMSwgcHQyMCk7XG4gICAgbGV0IHRyaWFuZ2xlX0IgPSBuZXcgVHJpYW5nbGUocHQwMSwgcHQxLCBwdDEyKTtcbiAgICBsZXQgdHJpYW5nbGVfQyA9IG5ldyBUcmlhbmdsZShwdDIwLCBwdDEyLCBwdDIpO1xuICAgIGxldCB0cmlhbmdsZV9NID0gbmV3IFRyaWFuZ2xlKHB0MDEsIHB0MTIsIHB0MjApO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHRyaWFuZ2xlX0EsXG4gICAgICB0cmlhbmdsZV9CLFxuICAgICAgdHJpYW5nbGVfQyxcbiAgICAgIHRyaWFuZ2xlX01dXG4gIH1cblxuICAvLyAgICAgcDBcbiAgLy8gICAgIHxcXFxuICAvLyAgICAgfCBcXFxuICAvLyAgICAgfCAgXFxcbiAgLy8gICAgIHwgICBcXFxuICAvLyAgICAgfCBBICBcXFxuICAvLyAgICAgfCAgICAgXFxcbiAgLy8gcDIwPnxfcDIwMV9cXCA8cDAxXG4gIC8vICAgICB8ICAgfCAgIFxcXG4gIC8vICAgICB8IEMgfCBCICBcXFxuICAvLyAgICAgfCAgIHwgICAgIFxcXG4gIC8vICAgICAtLS0tLS0tLS0tLSBwMVxuICAvLyBwMiAgIHAxMlxuICB0X3NwbGl0KCk6IFtUcmlhbmdsZSwgUXVhZHJpbGF0ZXJhbCwgUXVhZHJpbGF0ZXJhbF0ge1xuICAgIGxldCBwdDAgPSB0aGlzLnB0MDtcbiAgICBsZXQgcHQxID0gdGhpcy5wdDE7XG4gICAgbGV0IHB0MiA9IHRoaXMucHQyO1xuXG4gICAgbGV0IHB0MDEgPSBtaWRwb2ludChwdDAsIHB0MSk7XG4gICAgbGV0IHB0MTIgPSBtaWRwb2ludChwdDEsIHB0Mik7XG4gICAgbGV0IHB0MjAgPSBtaWRwb2ludChwdDIsIHB0MCk7XG4gICAgbGV0IHB0MjAxID0gbWlkcG9pbnQocHQwMSwgcHQyMCk7XG5cbiAgICBsZXQgdHJpYW5nbGVfQSA9IG5ldyBUcmlhbmdsZShwdDAsIHB0MDEsIHB0MjApO1xuICAgIGxldCBxdWFkcmlsYXRlcmFsX0IgPSBuZXcgUXVhZHJpbGF0ZXJhbChwdDIwMSwgcHQwMSwgcHQxLCBwdDEyKTtcbiAgICBsZXQgcXVhZHJpbGF0ZXJhbF9DID0gbmV3IFF1YWRyaWxhdGVyYWwocHQyMCwgcHQyMDEsIHB0MTIsIHB0Mik7XG5cbiAgICByZXR1cm4gW1xuICAgICAgdHJpYW5nbGVfQSxcbiAgICAgIHF1YWRyaWxhdGVyYWxfQixcbiAgICAgIHF1YWRyaWxhdGVyYWxfQ11cbiAgfVxuXG4gIHN0ZXBfb3B0aW9ucyh1bmlmb3JtX3dlaWdodHM6IGJvb2xlYW4pIHtcbiAgICBpZiAodW5pZm9ybV93ZWlnaHRzKSB7XG4gICAgICByZXR1cm4gNVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gOVxuICAgIH1cbiAgfVxuXG4gIG5leHRfc3RlcChpbmRleDogbnVtYmVyLCB1bmlmb3JtX3dlaWdodHM6IGJvb2xlYW4pOiBTaGFwZVtdIHtcbiAgICBpZiAodW5pZm9ybV93ZWlnaHRzKSB7XG4gICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gdGhpcy50cmlzZWN0KClcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiB0aGlzLnRfc3BsaXQoKVxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5yb3RhdGUoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy50X3NwbGl0KClcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHRoaXMucm90YXRlKCk7XG4gICAgICAgICAgdGhpcy5yb3RhdGUoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy50X3NwbGl0KClcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV4dF9zdGVwOiBpbmRleCBvdXQgb2YgcmFuZ2UnKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJpc2VjdCgpXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gdGhpcy50X3NwbGl0KClcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHRoaXMucm90YXRlKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudF9zcGxpdCgpXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB0aGlzLnJvdGF0ZSgpO1xuICAgICAgICAgIHRoaXMucm90YXRlKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudF9zcGxpdCgpXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXh0X3N0ZXA6IGluZGV4IG91dCBvZiByYW5nZScpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuXG5jbGFzcyBRdWFkcmlsYXRlcmFsIGV4dGVuZHMgU2hhcGUge1xuICBwdDA6IFBvaW50O1xuICBwdDE6IFBvaW50O1xuICBwdDI6IFBvaW50O1xuICBwdDM6IFBvaW50O1xuXG4gIGNvbnN0cnVjdG9yKHB0MDogUG9pbnQsIHB0MTogUG9pbnQsIHB0MjogUG9pbnQsIHB0MzogUG9pbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucHQwID0gcHQwO1xuICAgIHRoaXMucHQxID0gcHQxO1xuICAgIHRoaXMucHQyID0gcHQyO1xuICAgIHRoaXMucHQzID0gcHQzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBbdGhpcy5wdDAsIHRoaXMucHQxLCB0aGlzLnB0MiwgdGhpcy5wdDNdXG4gIH1cblxuICByb3RhdGUoKSB7XG4gICAgbGV0IHBvaW50cyA9IFt0aGlzLnB0MCwgdGhpcy5wdDEsIHRoaXMucHQyLCB0aGlzLnB0M107XG4gICAgW3RoaXMucHQxLCB0aGlzLnB0MiwgdGhpcy5wdDMsIHRoaXMucHQwXSA9IHBvaW50cztcbiAgfVxuXG4gIHN0ZXBfb3B0aW9ucyh1bmlmb3JtX3dlaWdodHM6IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgbmV4dF9zdGVwKGluZGV4OiBudW1iZXIsIHVuaWZvcm1fd2VpZ2h0czogYm9vbGVhbik6IFNoYXBlW10ge1xuICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25leHRfc3RlcDogaW5kZXggb3V0IG9mIHJhbmdlJylcbiAgICB9XG4gIH1cblxufVxuXG5cbmNsYXNzIFNxdWFyZSBleHRlbmRzIFF1YWRyaWxhdGVyYWwge1xuXG4gIC8vICAgICBwMCAgICAgcDAxICAgICAgcDFcbiAgLy8gICAgIF9fX19fX19fX19fX19fX19fXG4gIC8vICAgICB8ICAgICAgLyBcXCAgICAgIHxcbiAgLy8gICAgIHwgQSAgIC8gICBcXCAgQiAgfFxuICAvLyAgICAgfCAgICAvICAgICBcXCAgICB8XG4gIC8vICAgICB8ICAgLyAgICAgICBcXCAgIHxcbiAgLy8gICAgIHwgIC8gICAgICAgICBcXCAgfFxuICAvLyAgICAgfCAvICAgICAgICAgICBcXCB8XG4gIC8vIHAzMCB8LyAgICAgIE0gICAgICBcXHwgcDEyXG4gIC8vICAgICB8XFwgICAgICAgICAgICAgL3xcbiAgLy8gICAgIHwgXFwgICAgICAgICAgIC8gfFxuICAvLyAgICAgfCAgXFwgICAgICAgICAvICB8XG4gIC8vICAgICB8ICAgXFwgICAgICAgLyAgIHxcbiAgLy8gICAgIHwgICAgXFwgICAgIC8gICAgfFxuICAvLyAgICAgfCBEICAgXFwgICAvICBDICB8XG4gIC8vICAgICB8ICAgICAgXFwgLyAgICAgIHxcbiAgLy8gICAgIHwtLS0tLS0tLS0tLS0tLS18IHAyXG4gIC8vICAgICBwMyAgICAgcDIzXG4gIHF1YWRzZWN0KCk6IFtUcmlhbmdsZSwgVHJpYW5nbGUsIFRyaWFuZ2xlLCBUcmlhbmdsZSwgU3F1YXJlXSB7XG4gICAgbGV0IHB0MCA9IHRoaXMucHQwO1xuICAgIGxldCBwdDEgPSB0aGlzLnB0MTtcbiAgICBsZXQgcHQyID0gdGhpcy5wdDI7XG4gICAgbGV0IHB0MyA9IHRoaXMucHQzO1xuXG4gICAgbGV0IHB0MDEgPSBtaWRwb2ludCh0aGlzLnB0MCwgdGhpcy5wdDEpO1xuICAgIGxldCBwdDEyID0gbWlkcG9pbnQodGhpcy5wdDEsIHRoaXMucHQyKTtcbiAgICBsZXQgcHQyMyA9IG1pZHBvaW50KHRoaXMucHQyLCB0aGlzLnB0Myk7XG4gICAgbGV0IHB0MzAgPSBtaWRwb2ludCh0aGlzLnB0MywgdGhpcy5wdDApO1xuXG4gICAgbGV0IHRyaWFuZ2xlX0EgPSBuZXcgVHJpYW5nbGUocHQwLCBwdDAxLCBwdDMwKTtcbiAgICBsZXQgdHJpYW5nbGVfQiA9IG5ldyBUcmlhbmdsZShwdDAxLCBwdDEsIHB0MTIpO1xuICAgIGxldCB0cmlhbmdsZV9DID0gbmV3IFRyaWFuZ2xlKHB0MTIsIHB0MiwgcHQyMyk7XG4gICAgbGV0IHRyaWFuZ2xlX0QgPSBuZXcgVHJpYW5nbGUocHQzMCwgcHQyMywgcHQzKTtcbiAgICBsZXQgc3F1YXJlX00gPSBuZXcgU3F1YXJlKHB0MDEsIHB0MTIsIHB0MjMsIHB0MzApO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHRyaWFuZ2xlX0EsXG4gICAgICB0cmlhbmdsZV9CLFxuICAgICAgdHJpYW5nbGVfQyxcbiAgICAgIHRyaWFuZ2xlX0QsXG4gICAgICBzcXVhcmVfTV1cbiAgfVxuXG4gIC8vIHAwICAgICAgICAgICAgICBwMVxuICAvLyBfX19fX19fX19fX19fX19fX1xuICAvLyB8XFwgICAgICAgICAgICAgIHxcbiAgLy8gfCBcXCAgICAgICAgICAgICB8XG4gIC8vIHwgIFxcICAgICAgICAgICAgfFxuICAvLyB8ICAgXFwgICAgICBBICAgIHxcbiAgLy8gfCAgICBcXCAgICAgICAgICB8XG4gIC8vIHwgICAgIFxcICAgICAgICAgfFxuICAvLyB8ICAgICAgXFwgICAgICAgIHxcbiAgLy8gfCAgICAgICBcXCAgICAgICB8XG4gIC8vIHwgICAgICAgIFxcICAgICAgfFxuICAvLyB8ICAgICAgICAgXFwgICAgIHxcbiAgLy8gfCAgICAgICAgICBcXCAgICB8XG4gIC8vIHwgICBCICAgICAgIFxcICAgfFxuICAvLyB8ICAgICAgICAgICAgXFwgIHxcbiAgLy8gfCAgICAgICAgICAgICBcXCB8XG4gIC8vIHwtLS0tLS0tLS0tLS0tLS18IHAyXG4gIC8vIHAzXG4gIGJpc2VjdCgpOiBbVHJpYW5nbGUsIFRyaWFuZ2xlXSB7XG4gICAgbGV0IHB0MCA9IHRoaXMucHQwO1xuICAgIGxldCBwdDEgPSB0aGlzLnB0MTtcbiAgICBsZXQgcHQyID0gdGhpcy5wdDI7XG4gICAgbGV0IHB0MyA9IHRoaXMucHQzO1xuXG4gICAgbGV0IHRyaWFuZ2xlX0EgPSBuZXcgVHJpYW5nbGUocHQwLCBwdDEsIHB0Mik7XG4gICAgbGV0IHRyaWFuZ2xlX0IgPSBuZXcgVHJpYW5nbGUocHQwLCBwdDIsIHB0Myk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgdHJpYW5nbGVfQSxcbiAgICAgIHRyaWFuZ2xlX0JdXG4gIH1cblxuICBzdGVwX29wdGlvbnModW5pZm9ybV93ZWlnaHRzOiBib29sZWFuKSB7XG4gICAgaWYgKHVuaWZvcm1fd2VpZ2h0cykge1xuICAgICAgcmV0dXJuIDRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDZcbiAgICB9XG4gIH1cblxuICBuZXh0X3N0ZXAoaW5kZXg6IG51bWJlciwgdW5pZm9ybV93ZWlnaHRzOiBib29sZWFuKTogU2hhcGVbXSB7XG4gICAgaWYgKHVuaWZvcm1fd2VpZ2h0cykge1xuICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucXVhZHNlY3QoKVxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmlzZWN0KClcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHRoaXMucm90YXRlKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmlzZWN0KClcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV4dF9zdGVwOiBpbmRleCBvdXQgb2YgcmFuZ2UnKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIHJldHVybiB0aGlzLnF1YWRzZWN0KClcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJldHVybiB0aGlzLmJpc2VjdCgpXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICB0aGlzLnJvdGF0ZSgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmJpc2VjdCgpXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbmV4dF9zdGVwOiBpbmRleCBvdXQgb2YgcmFuZ2UnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcbiAgbGV0IHBpeGVsX3NpemUgPSBNYXRoLm1pbih3aW5kb3cuaW5uZXJIZWlnaHQsIHdpbmRvdy5pbm5lcldpZHRoKTtcbiAgY29uc29sZS5sb2coJ3BpeGVsIHNpemU6JywgcGl4ZWxfc2l6ZSk7XG5cbiAgY29uc3QgcHQwID0gbmV3IFBvaW50KHt4OiAwLCB5OiBwaXhlbF9zaXplfSk7XG4gIGNvbnN0IHB0MSA9IG5ldyBQb2ludCh7eDogcGl4ZWxfc2l6ZSwgeTogcGl4ZWxfc2l6ZX0pO1xuICBjb25zdCBwdDIgPSBuZXcgUG9pbnQoe3g6IHBpeGVsX3NpemUsIHk6IDB9KTtcbiAgY29uc3QgcHQzID0gbmV3IFBvaW50KHt4OiAwLCB5OiAwfSk7XG4gIGNvbnN0IGZyYWN0YWxfc2VlZCA9IG5ldyBTcXVhcmUocHQwLCBwdDEsIHB0MiwgcHQzKTtcblxuICBjb25zdCB1cmxfcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgdmFyIG1heF9kZXB0aCA9IE51bWJlcih1cmxfcGFyYW1zLmdldCgnZGVwdGgnKSk7XG4gIGlmICghbWF4X2RlcHRoKSB7XG4gICAgbWF4X2RlcHRoID0gM1xuICB9XG4gIHZhciBzdHJva2Vfd2lkdGggPSBOdW1iZXIodXJsX3BhcmFtcy5nZXQoJ3N0cm9rZScpKTtcbiAgaWYgKCFzdHJva2Vfd2lkdGgpIHtcbiAgICBzdHJva2Vfd2lkdGggPSAzXG4gIH1cbiAgY29uc3QgdW5pZm9ybV93ZWlnaHRzX3BhcmFtID0gdXJsX3BhcmFtcy5nZXQoJ3VuaWZvcm0nKTtcbiAgY29uc3QgdW5pZm9ybV93ZWlnaHRzID0gIXVuaWZvcm1fd2VpZ2h0c19wYXJhbSB8fCAodW5pZm9ybV93ZWlnaHRzX3BhcmFtID09ICd0Jyk7XG5cbiAgdmFyIG51bV9zaGFwZXMgPSBmcmFjdGFsX3NlZWQuZnJhY3RhbGl6ZShtYXhfZGVwdGgsIHBpeGVsX3NpemUsIHN0cm9rZV93aWR0aCwgdW5pZm9ybV93ZWlnaHRzKTtcbiAgY29uc29sZS5sb2coJ251bV9zaGFwZXMnLCBudW1fc2hhcGVzKTtcbiAgd2hpbGUgKG51bV9zaGFwZXMgPCAyKSB7XG4gICAgLy8gcmVtb3ZlIHByZXZpb3VzIFNWR1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuYm9keS5jaGlsZHJlblswXSk7XG5cbiAgICAvLyByZS1nZW5lcmF0ZVxuICAgIG51bV9zaGFwZXMgPSBmcmFjdGFsX3NlZWQuZnJhY3RhbGl6ZShtYXhfZGVwdGgsIHBpeGVsX3NpemUsIHN0cm9rZV93aWR0aCwgdW5pZm9ybV93ZWlnaHRzKTtcbiAgICBjb25zb2xlLmxvZygnbnVtX3NoYXBlcycsIG51bV9zaGFwZXMpO1xuICB9XG5cbn1cblxuLy8gcnVuIG1haW4gb24gbG9hZCAoYWZ0ZXIgPGJvZHk+IGV4aXN0cy4uKVxud2luZG93Lm9ubG9hZCA9IG1haW47XG5cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gKGNodW5rSWQpID0+IChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApO1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3NxdWFyZV9mcmFjdGFsXCJdID0gc2VsZltcIndlYnBhY2tDaHVua3NxdWFyZV9mcmFjdGFsXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbNTAwXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNDE3KSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibWlkcG9pbnQiLCJ4cyIsInlzIiwieCIsInkiLCJyZW5kZXJfcG9pbnRhcnJheSIsInRoaXMiLCJyZW5kZXIiLCJmbGF0TWFwIiwicHQiLCJmcmFjdGFsaXplIiwibWF4X2RlcHRoIiwicGl4ZWxfc2l6ZSIsInN0cm9rZV93aWR0aCIsInVuaWZvcm1fd2VpZ2h0cyIsImRyYXciLCJhZGRUbyIsInNpemUiLCJwb2x5bGluZSIsImZpbGwiLCJzdHJva2UiLCJjb2xvciIsIndpZHRoIiwibnVtX3N1Yl9zaGFwZXMiLCJ1bmZpbmlzaGVkX3NoYXBlcyIsInBvcCIsImN1cnJlbnRfc2hhcGUiLCJjdXJyZW50X2RlcHRoIiwibmV4dF9yYW5kb21fbnVtIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJtYXgiLCJzdGVwX29wdGlvbnMiLCJuZXh0X3N0ZXBfaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJwdXNoIiwibmV4dF9zdGVwIiwibWFwIiwibGVuZ3RoIiwicHQwIiwicHQxIiwicHQyIiwicm90YXRlIiwicG9pbnRzIiwidHJpc2VjdCIsInB0MDEiLCJwdDEyIiwicHQyMCIsIlRyaWFuZ2xlIiwidF9zcGxpdCIsInB0MjAxIiwiUXVhZHJpbGF0ZXJhbCIsImluZGV4IiwiRXJyb3IiLCJTaGFwZSIsInB0MyIsInF1YWRzZWN0IiwicHQyMyIsInB0MzAiLCJTcXVhcmUiLCJiaXNlY3QiLCJ3aW5kb3ciLCJvbmxvYWQiLCJtaW4iLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjb25zb2xlIiwibG9nIiwiZnJhY3RhbF9zZWVkIiwidXJsX3BhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImxvY2F0aW9uIiwic2VhcmNoIiwiTnVtYmVyIiwiZ2V0IiwidW5pZm9ybV93ZWlnaHRzX3BhcmFtIiwibnVtX3NoYXBlcyIsImRvY3VtZW50IiwiYm9keSIsInJlbW92ZUNoaWxkIiwiY2hpbGRyZW4iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJPIiwicmVzdWx0IiwiY2h1bmtJZHMiLCJmbiIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJpIiwiZnVsZmlsbGVkIiwiaiIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInNwbGljZSIsInIiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtJZCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJkYXRhIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImlkIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsImZvckVhY2giLCJiaW5kIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=