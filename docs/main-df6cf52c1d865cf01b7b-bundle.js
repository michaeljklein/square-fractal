(()=>{"use strict";var t,e={417:(t,e,n)=>{var r,o=n(500),i=(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});function p(t,e){return new o.E9({x:(t.x+e.x)/2,y:(t.y+e.y)/2})}var s=function(){function t(){}return t.prototype.render_pointarray=function(){return new o.VC(this.render().flatMap((function(t){return[t.x,t.y]})))},t.prototype.fractalize=function(t,e,n){var r=(0,o.Wj)().addTo("body").size(e,e);r.polyline(this.render_pointarray()).fill("none").stroke({color:"#000",width:n});for(var i=0,p=[[this,0]],s=function(){var e=p.pop(),o=e[0],s=e[1];if(i++,r.polyline(o.render_pointarray()).fill("none").stroke({color:"#000",width:n}),s<=t){var a=crypto.getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32),u=o.step_options(),c=Math.floor(a*u);p.push.apply(p,o.next_step(c).map((function(t){return[t,s+1]})))}};p.length;)s();return i},t}(),a=function(t){function e(e,n,r){var o=t.call(this)||this;return o.pt0=e,o.pt1=n,o.pt2=r,o}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2];this.pt1=t[0],this.pt2=t[1],this.pt0=t[2]},e.prototype.trisect=function(){var t=this.pt0,n=this.pt1,r=this.pt2,o=p(t,n),i=p(n,r),s=p(r,t);return[new e(t,o,s),new e(o,n,i),new e(s,i,r),new e(o,i,s)]},e.prototype.t_split=function(){var t=this.pt0,n=this.pt1,r=this.pt2,o=p(t,n),i=p(n,r),s=p(r,t),a=p(o,s);return[new e(t,o,s),new u(a,o,n,i),new u(s,a,i,r)]},e.prototype.step_options=function(){return 5},e.prototype.next_step=function(t){switch(t){case 0:return this.trisect();case 1:return this.t_split();case 2:return this.rotate(),this.t_split();case 3:return this.rotate(),this.rotate(),this.t_split();case 4:return[];default:throw new Error("next_step: index out of range")}},e}(s),u=function(t){function e(e,n,r,o){var i=t.call(this)||this;return i.pt0=e,i.pt1=n,i.pt2=r,i.pt3=o,i}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2,this.pt3]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2,this.pt3];this.pt1=t[0],this.pt2=t[1],this.pt3=t[2],this.pt0=t[3]},e.prototype.step_options=function(){return 1},e.prototype.next_step=function(t){if(0===t)return[];throw new Error("next_step: index out of range")},e}(s),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.quadsect=function(){var t=this.pt0,n=this.pt1,r=this.pt2,o=this.pt3,i=p(this.pt0,this.pt1),s=p(this.pt1,this.pt2),u=p(this.pt2,this.pt3),c=p(this.pt3,this.pt0);return[new a(t,i,c),new a(i,n,s),new a(s,r,u),new a(c,u,o),new e(i,s,u,c)]},e.prototype.bisect=function(){var t=this.pt0,e=this.pt1,n=this.pt2,r=this.pt3;return[new a(t,e,n),new a(t,n,r)]},e.prototype.step_options=function(){return 4},e.prototype.next_step=function(t){switch(t){case 0:return this.quadsect();case 1:return this.bisect();case 2:return this.rotate(),this.bisect();case 3:return[];default:throw new Error("next_step: index out of range")}},e}(u);window.onload=function(){return t=this,e=void 0,r=function(){var t,e,n,r,i,p,s,a,u,h;return function(t,e){var n,r,o,i,p={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(a){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(p=0)),p;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return p.label++,{value:s[1],done:!1};case 5:p.label++,r=s[1],s=[0];continue;case 7:s=p.ops.pop(),p.trys.pop();continue;default:if(!((o=(o=p.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){p=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){p.label=s[1];break}if(6===s[0]&&p.label<o[1]){p.label=o[1],o=s;break}if(o&&p.label<o[2]){p.label=o[2],p.ops.push(s);break}o[2]&&p.ops.pop(),p.trys.pop();continue}s=e.call(t,p)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}(this,(function(l){for(t=Math.min(window.innerHeight,window.innerWidth),console.log("pixel size:",t),e=new o.E9({x:0,y:t}),n=new o.E9({x:t,y:t}),r=new o.E9({x:t,y:0}),i=new o.E9({x:0,y:0}),p=new c(e,n,r,i),s=new URLSearchParams(window.location.search),(a=Number(s.get("depth")))||(a=3),(u=Number(s.get("stroke")))||(u=3),h=p.fractalize(a,t,u),console.log("num_shapes",h);h<2;)document.body.removeChild(document.body.children[0]),h=p.fractalize(a,t,u),console.log("num_shapes",h);return[2]}))},new((n=void 0)||(n=Promise))((function(o,i){function p(t){try{a(r.next(t))}catch(t){i(t)}}function s(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(p,s)}a((r=r.apply(t,e||[])).next())}));var t,e,n,r}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={exports:{}};return e[t](i,i.exports,r),i.exports}r.m=e,t=[],r.O=(e,n,o,i)=>{if(!n){var p=1/0;for(c=0;c<t.length;c++){for(var[n,o,i]=t[c],s=!0,a=0;a<n.length;a++)(!1&i||p>=i)&&Object.keys(r.O).every((t=>r.O[t](n[a])))?n.splice(a--,1):(s=!1,i<p&&(p=i));if(s){t.splice(c--,1);var u=o();void 0!==u&&(e=u)}}return e}i=i||0;for(var c=t.length;c>0&&t[c-1][2]>i;c--)t[c]=t[c-1];t[c]=[n,o,i]},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var o,i,[p,s,a]=n,u=0;if(p.some((e=>0!==t[e]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(a)var c=a(r)}for(e&&e(n);u<p.length;u++)i=p[u],r.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return r.O(c)},n=self.webpackChunksquare_fractal=self.webpackChunksquare_fractal||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var o=r.O(void 0,[500],(()=>r(417)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,