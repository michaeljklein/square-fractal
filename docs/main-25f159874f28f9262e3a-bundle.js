(()=>{"use strict";var t,e={417:(t,e,r)=>{var n,o=r(500),i=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});function s(t,e){return new o.E9({x:(t.x+e.x)/2,y:(t.y+e.y)/2})}var p=function(){function t(){}return t.prototype.render_pointarray=function(){return new o.VC(this.render().flatMap((function(t){return[t.x,t.y]})))},t.prototype.fractalize=function(t,e,r,n,i){var s=(0,o.Wj)().addTo("body").size(e,e);s.polyline(this.render_pointarray()).fill("none").stroke({color:"#000",width:r});for(var p=0,a=[[this,0]],u=function(){var e=a.pop(),o=e[0],i=e[1];if(p++,s.polyline(o.render_pointarray()).fill("none").stroke({color:"#000",width:r}),i<=t){var u=crypto.getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32),c=o.step_options(n),h=Math.floor(u*c);a.push.apply(a,o.next_step(h,n).map((function(t){return[t,i+1]})))}};a.length;)u();return p},t}(),a=function(t){function e(e,r,n){var o=t.call(this)||this;return o.pt0=e,o.pt1=r,o.pt2=n,o}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2];this.pt1=t[0],this.pt2=t[1],this.pt0=t[2]},e.prototype.trisect=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=s(t,r),i=s(r,n),p=s(n,t);return[new e(t,o,p),new e(o,r,i),new e(p,i,n),new e(o,i,p)]},e.prototype.t_split=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=s(t,r),i=s(r,n),p=s(n,t),a=s(o,p);return[new e(t,o,p),new u(a,o,r,i),new u(p,a,i,n)]},e.prototype.step_options=function(t){return t?5:9},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.trisect();case 1:return this.t_split();case 2:return this.rotate(),this.t_split();case 3:return this.rotate(),this.rotate(),this.t_split();case 4:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:case 2:return this.trisect();case 3:return this.t_split();case 4:return this.rotate(),this.t_split();case 5:return this.rotate(),this.rotate(),this.t_split();case 6:case 7:case 8:return[];default:throw new Error("next_step: index out of range")}},e}(p),u=function(t){function e(e,r,n,o){var i=t.call(this)||this;return i.pt0=e,i.pt1=r,i.pt2=n,i.pt3=o,i}return i(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2,this.pt3]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2,this.pt3];this.pt1=t[0],this.pt2=t[1],this.pt3=t[2],this.pt0=t[3]},e.prototype.step_options=function(t){return 1},e.prototype.next_step=function(t,e){if(0===t)return[];throw new Error("next_step: index out of range")},e}(p),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.quadsect=function(){var t=this.pt0,r=this.pt1,n=this.pt2,o=this.pt3,i=s(this.pt0,this.pt1),p=s(this.pt1,this.pt2),u=s(this.pt2,this.pt3),c=s(this.pt3,this.pt0);return[new a(t,i,c),new a(i,r,p),new a(p,n,u),new a(c,u,o),new e(i,p,u,c)]},e.prototype.bisect=function(){var t=this.pt0,e=this.pt1,r=this.pt2,n=this.pt3;return[new a(t,e,r),new a(t,r,n)]},e.prototype.step_options=function(t){return t?4:6},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.quadsect();case 1:return this.bisect();case 2:return this.rotate(),this.bisect();case 3:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:return this.quadsect();case 2:return this.bisect();case 3:return this.rotate(),this.bisect();case 4:case 5:return[];default:throw new Error("next_step: index out of range")}},e}(u);window.onload=function(){return t=this,e=void 0,n=function(){var t,e,r,n,i,s,p,a,u,h,l,f,w;return function(t,e){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function p(p){return function(a){return function(p){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,p[0]&&(s=0)),s;)try{if(r=1,n&&(o=2&p[0]?n.return:p[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,p[1])).done)return o;switch(n=0,o&&(p=[2&p[0],o.value]),p[0]){case 0:case 1:o=p;break;case 4:return s.label++,{value:p[1],done:!1};case 5:s.label++,n=p[1],p=[0];continue;case 7:p=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==p[0]&&2!==p[0])){s=0;continue}if(3===p[0]&&(!o||p[1]>o[0]&&p[1]<o[3])){s.label=p[1];break}if(6===p[0]&&s.label<o[1]){s.label=o[1],o=p;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(p);break}o[2]&&s.ops.pop(),s.trys.pop();continue}p=e.call(t,s)}catch(t){p=[6,t],n=0}finally{r=o=0}if(5&p[0])throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}([p,a])}}}(this,(function(y){for(t=Math.min(window.innerHeight,window.innerWidth),console.log("pixel size:",t),e=new o.E9({x:0,y:t}),r=new o.E9({x:t,y:t}),n=new o.E9({x:t,y:0}),i=new o.E9({x:0,y:0}),s=new c(e,r,n,i),p=new URLSearchParams(window.location.search),(a=Number(p.get("depth")))||(a=3),(u=Number(p.get("stroke")))||(u=3),h=Number(p.get("midpoint")),l=p.get("uniform"),f=!l||"t"==l,w=s.fractalize(a,t,u,f,h),console.log("num_shapes",w);w<2;)document.body.removeChild(document.body.children[0]),w=s.fractalize(a,t,u,f,h),console.log("num_shapes",w);return[2]}))},new((r=void 0)||(r=Promise))((function(o,i){function s(t){try{a(n.next(t))}catch(t){i(t)}}function p(t){try{a(n.throw(t))}catch(t){i(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,p)}a((n=n.apply(t,e||[])).next())}));var t,e,r,n}}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.m=e,t=[],n.O=(e,r,o,i)=>{if(!r){var s=1/0;for(c=0;c<t.length;c++){for(var[r,o,i]=t[c],p=!0,a=0;a<r.length;a++)(!1&i||s>=i)&&Object.keys(n.O).every((t=>n.O[t](r[a])))?r.splice(a--,1):(p=!1,i<s&&(s=i));if(p){t.splice(c--,1);var u=o();void 0!==u&&(e=u)}}return e}i=i||0;for(var c=t.length;c>0&&t[c-1][2]>i;c--)t[c]=t[c-1];t[c]=[r,o,i]},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};n.O.j=e=>0===t[e];var e=(e,r)=>{var o,i,[s,p,a]=r,u=0;if(s.some((e=>0!==t[e]))){for(o in p)n.o(p,o)&&(n.m[o]=p[o]);if(a)var c=a(n)}for(e&&e(r);u<s.length;u++)i=s[u],n.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return n.O(c)},r=self.webpackChunksquare_fractal=self.webpackChunksquare_fractal||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))})();var o=n.O(void 0,[500],(()=>n(417)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,