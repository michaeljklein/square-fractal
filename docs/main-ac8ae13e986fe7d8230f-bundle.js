(()=>{"use strict";var t,e={417:(t,e,n)=>{var i,r=n(500),o=(i=function(t,e){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},i(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),s=function(){function t(){}return t.prototype.midpoint=function(t,e){return this.midpoint_weight?new r.E9({x:this.midpoint_weight*t.x+(1-this.midpoint_weight)*e.x,y:this.midpoint_weight*t.y+(1-this.midpoint_weight)*e.y}):new r.E9({x:(t.x+e.x)/2,y:(t.y+e.y)/2})},t.prototype.render_pointarray=function(){return new r.VC(this.render().flatMap((function(t){return[t.x,t.y]})))},t.prototype.fractalize=function(t,e,n,i,o){var s=(0,r.Wj)().addTo("body").size(e,n||e);s.polyline(this.render_pointarray()).fill("none").stroke({color:"#000",width:i});for(var p=0,h=[[this,0]],a=function(){var e=h.pop(),n=e[0],r=e[1];if(p++,s.polyline(n.render_pointarray()).fill("none").stroke({color:"#000",width:i}),r<=t){var a=crypto.getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32),u=n.step_options(o),c=Math.floor(a*u);h.push.apply(h,n.next_step(c,o).map((function(t){return[t,r+1]})))}};h.length;)a();return p},t}(),p=function(t){function e(e,n,i,r){var o=t.call(this)||this;return o.pt0=e,o.pt1=n,o.pt2=i,o.midpoint_weight=r,o}return o(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2];this.pt1=t[0],this.pt2=t[1],this.pt0=t[2]},e.prototype.trisect=function(){var t=this.pt0,n=this.pt1,i=this.pt2,r=this.midpoint(t,n),o=this.midpoint(n,i),s=this.midpoint(i,t);return[new e(t,r,s,this.midpoint_weight),new e(r,n,o,this.midpoint_weight),new e(s,o,i,this.midpoint_weight),new e(r,o,s,this.midpoint_weight)]},e.prototype.t_split=function(){var t=this.pt0,n=this.pt1,i=this.pt2,r=this.midpoint(t,n),o=this.midpoint(n,i),s=this.midpoint(i,t),p=this.midpoint(r,s);return[new e(t,r,s,this.midpoint_weight),new h(p,r,n,o,this.midpoint_weight),new h(s,p,o,i,this.midpoint_weight)]},e.prototype.step_options=function(t){return t?5:9},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.trisect();case 1:return this.t_split();case 2:return this.rotate(),this.t_split();case 3:return this.rotate(),this.rotate(),this.t_split();case 4:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:case 2:return this.trisect();case 3:return this.t_split();case 4:return this.rotate(),this.t_split();case 5:return this.rotate(),this.rotate(),this.t_split();case 6:case 7:case 8:return[];default:throw new Error("next_step: index out of range")}},e}(s),h=function(t){function e(e,n,i,r,o){var s=t.call(this)||this;return s.pt0=e,s.pt1=n,s.pt2=i,s.pt3=r,s.midpoint_weight=o,s}return o(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2,this.pt3]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2,this.pt3];this.pt1=t[0],this.pt2=t[1],this.pt3=t[2],this.pt0=t[3]},e.prototype.step_options=function(t){return 1},e.prototype.next_step=function(t,e){if(0===t)return[];throw new Error("next_step: index out of range")},e}(s),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.quadsect=function(){var t=this.pt0,n=this.pt1,i=this.pt2,r=this.pt3,o=this.midpoint(this.pt0,this.pt1),s=this.midpoint(this.pt1,this.pt2),h=this.midpoint(this.pt2,this.pt3),a=this.midpoint(this.pt3,this.pt0);return[new p(t,o,a,this.midpoint_weight),new p(o,n,s,this.midpoint_weight),new p(s,i,h,this.midpoint_weight),new p(a,h,r,this.midpoint_weight),new e(o,s,h,a,this.midpoint_weight)]},e.prototype.bisect=function(){var t=this.pt0,e=this.pt1,n=this.pt2,i=this.pt3;return[new p(t,e,n,this.midpoint_weight),new p(t,n,i,this.midpoint_weight)]},e.prototype.step_options=function(t){return t?4:6},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.quadsect();case 1:return this.bisect();case 2:return this.rotate(),this.bisect();case 3:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:return this.quadsect();case 2:return this.bisect();case 3:return this.rotate(),this.bisect();case 4:case 5:return[];default:throw new Error("next_step: index out of range")}},e}(h);window.onload=function(){return t=this,e=void 0,i=function(){var t,e,n,i,o,s,p,h,u,c,l,f,w,d;return function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function p(p){return function(h){return function(p){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,p[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&p[0]?i.return:p[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,p[1])).done)return r;switch(i=0,r&&(p=[2&p[0],r.value]),p[0]){case 0:case 1:r=p;break;case 4:return s.label++,{value:p[1],done:!1};case 5:s.label++,i=p[1],p=[0];continue;case 7:p=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==p[0]&&2!==p[0])){s=0;continue}if(3===p[0]&&(!r||p[1]>r[0]&&p[1]<r[3])){s.label=p[1];break}if(6===p[0]&&s.label<r[1]){s.label=r[1],r=p;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(p);break}r[2]&&s.ops.pop(),s.trys.pop();continue}p=e.call(t,s)}catch(t){p=[6,t],i=0}finally{n=r=0}if(5&p[0])throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}([p,h])}}}(this,(function(y){for(t=new URLSearchParams(window.location.search),(e=Number(t.get("depth")))||(e=3),(n=Number(t.get("stroke")))||(n=3),i=Number(t.get("midpoint")),o="t"==t.get("uniform"),s="t"==t.get("rectangular"),console.log("max_depth:",e),console.log("stroke_width:",n),console.log("midpoint_weight:",i),console.log("uniform_weights:",o),console.log("rectangular_seed:",s),p=Math.min(window.innerHeight,window.innerWidth),console.log("pixel size:",p),u=new r.E9({x:0,y:p}),c=new r.E9({x:p,y:p}),l=new r.E9({x:p,y:0}),f=new r.E9({x:0,y:0}),h=null,s&&(p=window.innerWidth,h=window.innerHeight,u=new r.E9({x:0,y:h}),c=new r.E9({x:p,y:h}),l=new r.E9({x:p,y:0}),f=new r.E9({x:0,y:0})),w=new a(u,c,l,f,i),d=w.fractalize(e,p,h,n,o),console.log("num_shapes",d);d<2;)console.log("regenerating to ensure num_shapes >= 2.."),document.body.removeChild(document.body.children[0]),d=w.fractalize(e,p,h,n,o),console.log("num_shapes",d);return[2]}))},new((n=void 0)||(n=Promise))((function(r,o){function s(t){try{h(i.next(t))}catch(t){o(t)}}function p(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,p)}h((i=i.apply(t,e||[])).next())}));var t,e,n,i}}},n={};function i(t){var r=n[t];if(void 0!==r)return r.exports;var o=n[t]={exports:{}};return e[t](o,o.exports,i),o.exports}i.m=e,t=[],i.O=(e,n,r,o)=>{if(!n){var s=1/0;for(u=0;u<t.length;u++){for(var[n,r,o]=t[u],p=!0,h=0;h<n.length;h++)(!1&o||s>=o)&&Object.keys(i.O).every((t=>i.O[t](n[h])))?n.splice(h--,1):(p=!1,o<s&&(s=o));if(p){t.splice(u--,1);var a=r();void 0!==a&&(e=a)}}return e}o=o||0;for(var u=t.length;u>0&&t[u-1][2]>o;u--)t[u]=t[u-1];t[u]=[n,r,o]},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var r,o,[s,p,h]=n,a=0;if(s.some((e=>0!==t[e]))){for(r in p)i.o(p,r)&&(i.m[r]=p[r]);if(h)var u=h(i)}for(e&&e(n);a<s.length;a++)o=s[a],i.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return i.O(u)},n=self.webpackChunksquare_fractal=self.webpackChunksquare_fractal||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var r=i.O(void 0,[500],(()=>i(417)));r=i.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,