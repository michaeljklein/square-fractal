(()=>{"use strict";var t,e={417:(t,e,i)=>{var n,r=i(500),o=(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),s=function(){function t(){}return t.prototype.midpoint=function(t,e){return null!=this.midpoint_weight?(console.log(this.midpoint_weight),new r.E9({x:this.midpoint_weight*t.x+(1-this.midpoint_weight)*e.x,y:this.midpoint_weight*t.y+(1-this.midpoint_weight)*e.y})):new r.E9({x:(t.x+e.x)/2,y:(t.y+e.y)/2})},t.prototype.render_pointarray=function(){return new r.VC(this.render().flatMap((function(t){return[t.x,t.y]})))},t.prototype.fractalize=function(t,e,i,n,o){var s=(0,r.Wj)().addTo("body").size(e,e);s.polyline(this.render_pointarray()).fill("none").stroke({color:"#000",width:i});for(var p=0,h=[[this,0]],a=function(){var e=h.pop(),r=e[0],o=e[1];if(p++,s.polyline(r.render_pointarray()).fill("none").stroke({color:"#000",width:i}),o<=t){var a=crypto.getRandomValues(new Uint32Array(1))[0]/Math.pow(2,32),u=r.step_options(n),c=Math.floor(a*u);h.push.apply(h,r.next_step(c,n).map((function(t){return[t,o+1]})))}};h.length;)a();return p},t}(),p=function(t){function e(e,i,n,r){var o=t.call(this)||this;return o.pt0=e,o.pt1=i,o.pt2=n,o.midpoint_weight=r,o}return o(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2];this.pt1=t[0],this.pt2=t[1],this.pt0=t[2]},e.prototype.trisect=function(){var t=this.pt0,i=this.pt1,n=this.pt2,r=this.midpoint(t,i),o=this.midpoint(i,n),s=this.midpoint(n,t);return[new e(t,r,s,this.midpoint_weight),new e(r,i,o,this.midpoint_weight),new e(s,o,n,this.midpoint_weight),new e(r,o,s,this.midpoint_weight)]},e.prototype.t_split=function(){var t=this.pt0,i=this.pt1,n=this.pt2,r=this.midpoint(t,i),o=this.midpoint(i,n),s=this.midpoint(n,t),p=this.midpoint(r,s);return[new e(t,r,s,this.midpoint_weight),new h(p,r,i,o,this.midpoint_weight),new h(s,p,o,n,this.midpoint_weight)]},e.prototype.step_options=function(t){return t?5:9},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.trisect();case 1:return this.t_split();case 2:return this.rotate(),this.t_split();case 3:return this.rotate(),this.rotate(),this.t_split();case 4:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:case 2:return this.trisect();case 3:return this.t_split();case 4:return this.rotate(),this.t_split();case 5:return this.rotate(),this.rotate(),this.t_split();case 6:case 7:case 8:return[];default:throw new Error("next_step: index out of range")}},e}(s),h=function(t){function e(e,i,n,r,o){var s=t.call(this)||this;return s.pt0=e,s.pt1=i,s.pt2=n,s.pt3=r,s.midpoint_weight=o,s}return o(e,t),e.prototype.render=function(){return[this.pt0,this.pt1,this.pt2,this.pt3]},e.prototype.rotate=function(){var t=[this.pt0,this.pt1,this.pt2,this.pt3];this.pt1=t[0],this.pt2=t[1],this.pt3=t[2],this.pt0=t[3]},e.prototype.step_options=function(t){return 1},e.prototype.next_step=function(t,e){if(0===t)return[];throw new Error("next_step: index out of range")},e}(s),a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.quadsect=function(){var t=this.pt0,i=this.pt1,n=this.pt2,r=this.pt3,o=this.midpoint(this.pt0,this.pt1),s=this.midpoint(this.pt1,this.pt2),h=this.midpoint(this.pt2,this.pt3),a=this.midpoint(this.pt3,this.pt0);return[new p(t,o,a,this.midpoint_weight),new p(o,i,s,this.midpoint_weight),new p(s,n,h,this.midpoint_weight),new p(a,h,r,this.midpoint_weight),new e(o,s,h,a,this.midpoint_weight)]},e.prototype.bisect=function(){var t=this.pt0,e=this.pt1,i=this.pt2,n=this.pt3;return[new p(t,e,i,this.midpoint_weight),new p(t,i,n,this.midpoint_weight)]},e.prototype.step_options=function(t){return t?4:6},e.prototype.next_step=function(t,e){if(e)switch(t){case 0:return this.quadsect();case 1:return this.bisect();case 2:return this.rotate(),this.bisect();case 3:return[];default:throw new Error("next_step: index out of range")}else switch(t){case 0:case 1:return this.quadsect();case 2:return this.bisect();case 3:return this.rotate(),this.bisect();case 4:case 5:return[];default:throw new Error("next_step: index out of range")}},e}(h);window.onload=function(){return t=this,e=void 0,n=function(){var t,e,i,n,o,s,p,h,u,c,l,f,d;return function(t,e){var i,n,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function p(p){return function(h){return function(p){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,p[0]&&(s=0)),s;)try{if(i=1,n&&(r=2&p[0]?n.return:p[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,p[1])).done)return r;switch(n=0,r&&(p=[2&p[0],r.value]),p[0]){case 0:case 1:r=p;break;case 4:return s.label++,{value:p[1],done:!1};case 5:s.label++,n=p[1],p=[0];continue;case 7:p=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==p[0]&&2!==p[0])){s=0;continue}if(3===p[0]&&(!r||p[1]>r[0]&&p[1]<r[3])){s.label=p[1];break}if(6===p[0]&&s.label<r[1]){s.label=r[1],r=p;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(p);break}r[2]&&s.ops.pop(),s.trys.pop();continue}p=e.call(t,s)}catch(t){p=[6,t],n=0}finally{i=r=0}if(5&p[0])throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}([p,h])}}}(this,(function(w){for(t=Math.min(window.innerHeight,window.innerWidth),console.log("pixel size:",t),e=new r.E9({x:0,y:t}),i=new r.E9({x:t,y:t}),n=new r.E9({x:t,y:0}),o=new r.E9({x:0,y:0}),s=new a(e,i,n,o,this.midpoint_weight),p=new URLSearchParams(window.location.search),(h=Number(p.get("depth")))||(h=3),(u=Number(p.get("stroke")))||(u=3),c=Number(p.get("midpoint")),l=p.get("uniform"),f=!l||"t"==l,console.log("max_depth:",h),console.log("stroke_width:",u),console.log("midpoint_weight:",c),console.log("uniform_weights:",f),d=s.fractalize(h,t,u,f,c),console.log("num_shapes",d);d<2;)document.body.removeChild(document.body.children[0]),d=s.fractalize(h,t,u,f,c),console.log("num_shapes",d);return[2]}))},new((i=void 0)||(i=Promise))((function(r,o){function s(t){try{h(n.next(t))}catch(t){o(t)}}function p(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,p)}h((n=n.apply(t,e||[])).next())}));var t,e,i,n}}},i={};function n(t){var r=i[t];if(void 0!==r)return r.exports;var o=i[t]={exports:{}};return e[t](o,o.exports,n),o.exports}n.m=e,t=[],n.O=(e,i,r,o)=>{if(!i){var s=1/0;for(u=0;u<t.length;u++){for(var[i,r,o]=t[u],p=!0,h=0;h<i.length;h++)(!1&o||s>=o)&&Object.keys(n.O).every((t=>n.O[t](i[h])))?i.splice(h--,1):(p=!1,o<s&&(s=o));if(p){t.splice(u--,1);var a=r();void 0!==a&&(e=a)}}return e}o=o||0;for(var u=t.length;u>0&&t[u-1][2]>o;u--)t[u]=t[u-1];t[u]=[i,r,o]},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={179:0};n.O.j=e=>0===t[e];var e=(e,i)=>{var r,o,[s,p,h]=i,a=0;if(s.some((e=>0!==t[e]))){for(r in p)n.o(p,r)&&(n.m[r]=p[r]);if(h)var u=h(n)}for(e&&e(i);a<s.length;a++)o=s[a],n.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return n.O(u)},i=self.webpackChunksquare_fractal=self.webpackChunksquare_fractal||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();var r=n.O(void 0,[500],(()=>n(417)));r=n.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,